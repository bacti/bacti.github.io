{"version":3,"sources":["DragDropTouch.js","common/utils.ts","components/CompDigit.tsx","common/redux.ts","components/CompEvaluation.tsx","components/CompDigitPanel.tsx","components/CompNumber.tsx","components/CompAddition.tsx","pages/PageDemo.tsx","pages/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DragDropTouch","DragDropTouch_1","DataTransfer","this","_dropEffect","_effectAllowed","_data","Object","defineProperty","prototype","get","set","value","enumerable","configurable","keys","clearData","type","getData","setData","setDragImage","img","offsetX","offsetY","ddt","_instance","_imgCustom","_imgOffset","x","y","_lastClick","supportsPassive","document","addEventListener","d","ts","_touchstart","bind","tm","_touchmove","te","_touchend","opt","passive","capture","getInstance","e","_this","_shouldHandle","Date","now","_DBLCLICK","_dispatchEvent","target","preventDefault","_reset","src","_closestDraggable","_dragSource","_ptDown","_getPoint","_lastTouch","setTimeout","_img","_CTXMENU","_ISPRESSHOLDMODE","_pressHoldInterval","_isDragEnabled","_PRESSHOLDAWAIT","_shouldCancelPressHoldMove","_shouldHandleMove","_shouldHandlePressHoldMove","_getTarget","_shouldStartDragging","_createImage","_lastTarget","_moveImage","_isDropZone","_destroyImage","indexOf","defaultPrevented","touches","length","_getDelta","_PRESSHOLDMARGIN","delta","_THRESHOLD","_PRESSHOLDTHRESHOLD","_dataTransfer","clearInterval","page","pageX","clientX","pageY","clientY","p","Math","abs","pt","el","elementFromPoint","getComputedStyle","pointerEvents","parentElement","cloneNode","_copyStyle","style","top","left","rc","getBoundingClientRect","opacity","_OPACITY","toString","body","appendChild","removeChild","requestAnimationFrame","s","position","zIndex","round","_copyProps","dst","props","i","_rmvAtts","forEach","att","removeAttribute","HTMLCanvasElement","cSrc","cDst","width","height","getContext","drawImage","cs","key","children","evt","createEvent","t","initEvent","button","which","buttons","_kbdProps","_ptProps","dataTransfer","dispatchEvent","hasAttribute","draggable","split","CompDigit","digit","onDragStart","onDragEnd","className","fontFamily","connectDigit","connect","digitPanel","store","targetPanel","state","setState","connectEvaluation","results","score","updateResult","index","updateScore","increment","CompEvaluation","React","useState","finished","submit","right","paddingRight","textAlign","fontSize","color","fontWeight","backgroundColor","padding","border","cursor","onClick","mark","reduce","result","CompDigitPanel","onDragOver","onDrop","CompNumber","mask","number","useRef","repeat","slice","ref","display","justifyContent","map","isFinite","event","validDigit","panel","currentTarget","CompAddition","id","operands","summandFirst","summandSecond","sum","operandFirst","operandSecond","useEffect","a","current","innerText","replace","update","String","background","margin","ceil","log10","max","Util","min","random","element","digitElement","check","ondragend","createElement","replaceWith","PageDemo","refresh","problems","useMemo","Array","_","innerHTML","cloneDigit","overflowY","flexFlow","ETypes","stack","createStore","currentPage","DEMO","Content","push","next","pop","previous","pages","Page","App","Display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1432bdd2.chunk.js","sourcesContent":["// @ts-nocheck\r\nvar DragDropTouch;\r\n(function (DragDropTouch_1) {\r\n    'use strict';\r\n    /**\r\n     * Object used to hold the data that is being dragged during drag and drop operations.\r\n     *\r\n     * It may hold one or more data items of different types. For more information about\r\n     * drag and drop operations and data transfer objects, see\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\r\n     *\r\n     * This object is created automatically by the @see:DragDropTouch singleton and is\r\n     * accessible through the @see:dataTransfer property of all drag events.\r\n     */\r\n    var DataTransfer = (function () {\r\n        function DataTransfer() {\r\n            this._dropEffect = 'move';\r\n            this._effectAllowed = 'all';\r\n            this._data = {};\r\n        }\r\n        Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\r\n            /**\r\n             * Gets or sets the type of drag-and-drop operation currently selected.\r\n             * The value must be 'none',  'copy',  'link', or 'move'.\r\n             */\r\n            get: function () {\r\n                return this._dropEffect;\r\n            },\r\n            set: function (value) {\r\n                this._dropEffect = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\r\n            /**\r\n             * Gets or sets the types of operations that are possible.\r\n             * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\r\n             * 'linkMove', 'move', 'all' or 'uninitialized'.\r\n             */\r\n            get: function () {\r\n                return this._effectAllowed;\r\n            },\r\n            set: function (value) {\r\n                this._effectAllowed = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"types\", {\r\n            /**\r\n             * Gets an array of strings giving the formats that were set in the @see:dragstart event.\r\n             */\r\n            get: function () {\r\n                return Object.keys(this._data);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Removes the data associated with a given type.\r\n         *\r\n         * The type argument is optional. If the type is empty or not specified, the data\r\n         * associated with all types is removed. If data for the specified type does not exist,\r\n         * or the data transfer contains no data, this method will have no effect.\r\n         *\r\n         * @param type Type of data to remove.\r\n         */\r\n        DataTransfer.prototype.clearData = function (type) {\r\n            if (type != null) {\r\n                delete this._data[type];\r\n            }\r\n            else {\r\n                this._data = null;\r\n            }\r\n        };\r\n        /**\r\n         * Retrieves the data for a given type, or an empty string if data for that type does\r\n         * not exist or the data transfer contains no data.\r\n         *\r\n         * @param type Type of data to retrieve.\r\n         */\r\n        DataTransfer.prototype.getData = function (type) {\r\n            return this._data[type] || '';\r\n        };\r\n        /**\r\n         * Set the data for a given type.\r\n         *\r\n         * For a list of recommended drag types, please see\r\n         * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\r\n         *\r\n         * @param type Type of data to add.\r\n         * @param value Data to add.\r\n         */\r\n        DataTransfer.prototype.setData = function (type, value) {\r\n            this._data[type] = value;\r\n        };\r\n        /**\r\n         * Set the image to be used for dragging if a custom one is desired.\r\n         *\r\n         * @param img An image element to use as the drag feedback image.\r\n         * @param offsetX The horizontal offset within the image.\r\n         * @param offsetY The vertical offset within the image.\r\n         */\r\n        DataTransfer.prototype.setDragImage = function (img, offsetX, offsetY) {\r\n            var ddt = DragDropTouch._instance;\r\n            ddt._imgCustom = img;\r\n            ddt._imgOffset = { x: offsetX, y: offsetY };\r\n        };\r\n        return DataTransfer;\r\n    }());\r\n    DragDropTouch_1.DataTransfer = DataTransfer;\r\n    /**\r\n     * Defines a class that adds support for touch-based HTML5 drag/drop operations.\r\n     *\r\n     * The @see:DragDropTouch class listens to touch events and raises the\r\n     * appropriate HTML5 drag/drop events as if the events had been caused\r\n     * by mouse actions.\r\n     *\r\n     * The purpose of this class is to enable using existing, standard HTML5\r\n     * drag/drop code on mobile devices running IOS or Android.\r\n     *\r\n     * To use, include the DragDropTouch.js file on the page. The class will\r\n     * automatically start monitoring touch events and will raise the HTML5\r\n     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which\r\n     * should be handled by the application.\r\n     *\r\n     * For details and examples on HTML drag and drop, see\r\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.\r\n     */\r\n    var DragDropTouch = (function () {\r\n        /**\r\n         * Initializes the single instance of the @see:DragDropTouch class.\r\n         */\r\n        function DragDropTouch() {\r\n            this._lastClick = 0;\r\n            // enforce singleton pattern\r\n            if (DragDropTouch._instance) {\r\n                throw 'DragDropTouch instance already created.';\r\n            }\r\n            // detect passive event support\r\n            // https://github.com/Modernizr/Modernizr/issues/1894\r\n            var supportsPassive = false;\r\n            document.addEventListener('test', function () { }, {\r\n                get passive() {\r\n                    supportsPassive = true;\r\n                    return true;\r\n                }\r\n            });\r\n            // listen to touch events\r\n            if ('ontouchstart' in document) {\r\n                var d = document, ts = this._touchstart.bind(this), tm = this._touchmove.bind(this), te = this._touchend.bind(this), opt = supportsPassive ? { passive: false, capture: false } : false;\r\n                d.addEventListener('touchstart', ts, opt);\r\n                d.addEventListener('touchmove', tm, opt);\r\n                d.addEventListener('touchend', te);\r\n                d.addEventListener('touchcancel', te);\r\n            }\r\n        }\r\n        /**\r\n         * Gets a reference to the @see:DragDropTouch singleton.\r\n         */\r\n        DragDropTouch.getInstance = function () {\r\n            return DragDropTouch._instance;\r\n        };\r\n        // ** event handlers\r\n        DragDropTouch.prototype._touchstart = function (e) {\r\n            var _this = this;\r\n            if (this._shouldHandle(e)) {\r\n                // raise double-click and prevent zooming\r\n                if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\r\n                    if (this._dispatchEvent(e, 'dblclick', e.target)) {\r\n                        e.preventDefault();\r\n                        this._reset();\r\n                        return;\r\n                    }\r\n                }\r\n                // clear all variables\r\n                this._reset();\r\n                // get nearest draggable element\r\n                var src = this._closestDraggable(e.target);\r\n                if (src) {\r\n                    // give caller a chance to handle the hover/move events\r\n                    if (!this._dispatchEvent(e, 'mousemove', e.target) &&\r\n                        !this._dispatchEvent(e, 'mousedown', e.target)) {\r\n                        // get ready to start dragging\r\n                        this._dragSource = src;\r\n                        this._ptDown = this._getPoint(e);\r\n                        this._lastTouch = e;\r\n                        e.preventDefault();\r\n                        // show context menu if the user hasn't started dragging after a while\r\n                        setTimeout(function () {\r\n                            if (_this._dragSource == src && _this._img == null) {\r\n                                if (_this._dispatchEvent(e, 'contextmenu', src)) {\r\n                                    _this._reset();\r\n                                }\r\n                            }\r\n                        }, DragDropTouch._CTXMENU);\r\n                        if (DragDropTouch._ISPRESSHOLDMODE) {\r\n                            this._pressHoldInterval = setTimeout(function () {\r\n                                _this._isDragEnabled = true;\r\n                                _this._touchmove(e);\r\n                            }, DragDropTouch._PRESSHOLDAWAIT);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchmove = function (e) {\r\n            if (this._shouldCancelPressHoldMove(e)) {\r\n              this._reset();\r\n              return;\r\n            }\r\n            if (this._shouldHandleMove(e) || this._shouldHandlePressHoldMove(e)) {\r\n                // see if target wants to handle move\r\n                var target = this._getTarget(e);\r\n                if (this._dispatchEvent(e, 'mousemove', target)) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // start dragging\r\n                if (this._dragSource && !this._img && this._shouldStartDragging(e)) {\r\n                    this._dispatchEvent(e, 'dragstart', this._dragSource);\r\n                    this._createImage(e);\r\n                    this._dispatchEvent(e, 'dragenter', target);\r\n                }\r\n                // continue dragging\r\n                if (this._img) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault(); // prevent scrolling\r\n                    if (target != this._lastTarget) {\r\n                        this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                        this._lastTarget = target;\r\n                    }\r\n                    this._moveImage(e);\r\n                    this._isDropZone = this._dispatchEvent(e, 'dragover', target);\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchend = function (e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle up\r\n                if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // user clicked the element but didn't drag, so clear the source and simulate a click\r\n                if (!this._img) {\r\n                    this._dragSource = null;\r\n                    this._dispatchEvent(this._lastTouch, 'click', e.target);\r\n                    this._lastClick = Date.now();\r\n                }\r\n                // finish dragging\r\n                this._destroyImage();\r\n                if (this._dragSource) {\r\n                    if (e.type.indexOf('cancel') < 0 && this._isDropZone) {\r\n                        this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);\r\n                    }\r\n                    this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);\r\n                    this._reset();\r\n                }\r\n            }\r\n        };\r\n        // ** utilities\r\n        // ignore events that have been handled or that involve more than one touch\r\n        DragDropTouch.prototype._shouldHandle = function (e) {\r\n            return e &&\r\n                !e.defaultPrevented &&\r\n                e.touches && e.touches.length < 2;\r\n        };\r\n\r\n        // use regular condition outside of press & hold mode\r\n        DragDropTouch.prototype._shouldHandleMove = function (e) {\r\n          return !DragDropTouch._ISPRESSHOLDMODE && this._shouldHandle(e);\r\n        };\r\n\r\n        // allow to handle moves that involve many touches for press & hold\r\n        DragDropTouch.prototype._shouldHandlePressHoldMove = function (e) {\r\n          return DragDropTouch._ISPRESSHOLDMODE &&\r\n              this._isDragEnabled && e && e.touches && e.touches.length;\r\n        };\r\n\r\n        // reset data if user drags without pressing & holding\r\n        DragDropTouch.prototype._shouldCancelPressHoldMove = function (e) {\r\n          return DragDropTouch._ISPRESSHOLDMODE && !this._isDragEnabled &&\r\n              this._getDelta(e) > DragDropTouch._PRESSHOLDMARGIN;\r\n        };\r\n\r\n        // start dragging when specified delta is detected\r\n        DragDropTouch.prototype._shouldStartDragging = function (e) {\r\n            var delta = this._getDelta(e);\r\n            return delta > DragDropTouch._THRESHOLD ||\r\n                (DragDropTouch._ISPRESSHOLDMODE && delta >= DragDropTouch._PRESSHOLDTHRESHOLD);\r\n        }\r\n\r\n        // clear all members\r\n        DragDropTouch.prototype._reset = function () {\r\n            this._destroyImage();\r\n            this._dragSource = null;\r\n            this._lastTouch = null;\r\n            this._lastTarget = null;\r\n            this._ptDown = null;\r\n            this._isDragEnabled = false;\r\n            this._isDropZone = false;\r\n            this._dataTransfer = new DataTransfer();\r\n            clearInterval(this._pressHoldInterval);\r\n        };\r\n        // get point for a touch event\r\n        DragDropTouch.prototype._getPoint = function (e, page) {\r\n            if (e && e.touches) {\r\n                e = e.touches[0];\r\n            }\r\n            return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\r\n        };\r\n        // get distance between the current touch event and the first one\r\n        DragDropTouch.prototype._getDelta = function (e) {\r\n            if (DragDropTouch._ISPRESSHOLDMODE && !this._ptDown) { return 0; }\r\n            var p = this._getPoint(e);\r\n            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\r\n        };\r\n        // get the element at a given touch event\r\n        DragDropTouch.prototype._getTarget = function (e) {\r\n            var pt = this._getPoint(e), el = document.elementFromPoint(pt.x, pt.y);\r\n            while (el && getComputedStyle(el).pointerEvents == 'none') {\r\n                el = el.parentElement;\r\n            }\r\n            return el;\r\n        };\r\n        // create drag image from source element\r\n        DragDropTouch.prototype._createImage = function (e) {\r\n            // just in case...\r\n            if (this._img) {\r\n                this._destroyImage();\r\n            }\r\n            // create drag image from custom element or drag source\r\n            var src = this._imgCustom || this._dragSource;\r\n            this._img = src.cloneNode(true);\r\n            this._copyStyle(src, this._img);\r\n            this._img.style.top = this._img.style.left = '-9999px';\r\n            // if creating from drag source, apply offset and opacity\r\n            if (!this._imgCustom) {\r\n                var rc = src.getBoundingClientRect(), pt = this._getPoint(e);\r\n                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\r\n                this._img.style.opacity = DragDropTouch._OPACITY.toString();\r\n            }\r\n            // add image to document\r\n            this._moveImage(e);\r\n            document.body.appendChild(this._img);\r\n        };\r\n        // dispose of drag image element\r\n        DragDropTouch.prototype._destroyImage = function () {\r\n            if (this._img && this._img.parentElement) {\r\n                this._img.parentElement.removeChild(this._img);\r\n            }\r\n            this._img = null;\r\n            this._imgCustom = null;\r\n        };\r\n        // move the drag image element\r\n        DragDropTouch.prototype._moveImage = function (e) {\r\n            var _this = this;\r\n            requestAnimationFrame(function () {\r\n                if (_this._img) {\r\n                    var pt = _this._getPoint(e, true), s = _this._img.style;\r\n                    s.position = 'absolute';\r\n                    s.pointerEvents = 'none';\r\n                    s.zIndex = '999999';\r\n                    s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';\r\n                    s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';\r\n                }\r\n            });\r\n        };\r\n        // copy properties from an object to another\r\n        DragDropTouch.prototype._copyProps = function (dst, src, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n                var p = props[i];\r\n                dst[p] = src[p];\r\n            }\r\n        };\r\n        DragDropTouch.prototype._copyStyle = function (src, dst) {\r\n            // remove potentially troublesome attributes\r\n            DragDropTouch._rmvAtts.forEach(function (att) {\r\n                dst.removeAttribute(att);\r\n            });\r\n            // copy canvas content\r\n            if (src instanceof HTMLCanvasElement) {\r\n                var cSrc = src, cDst = dst;\r\n                cDst.width = cSrc.width;\r\n                cDst.height = cSrc.height;\r\n                cDst.getContext('2d').drawImage(cSrc, 0, 0);\r\n            }\r\n            // copy style (without transitions)\r\n            var cs = getComputedStyle(src);\r\n            for (var i = 0; i < cs.length; i++) {\r\n                var key = cs[i];\r\n                if (key.indexOf('transition') < 0) {\r\n                    dst.style[key] = cs[key];\r\n                }\r\n            }\r\n            dst.style.pointerEvents = 'none';\r\n            // and repeat for all children\r\n            for (var i = 0; i < src.children.length; i++) {\r\n                this._copyStyle(src.children[i], dst.children[i]);\r\n            }\r\n        };\r\n        DragDropTouch.prototype._dispatchEvent = function (e, type, target) {\r\n            if (e && target) {\r\n                var evt = document.createEvent('Event'), t = e.touches ? e.touches[0] : e;\r\n                evt.initEvent(type, true, true);\r\n                evt.button = 0;\r\n                evt.which = evt.buttons = 1;\r\n                this._copyProps(evt, e, DragDropTouch._kbdProps);\r\n                this._copyProps(evt, t, DragDropTouch._ptProps);\r\n                evt.dataTransfer = this._dataTransfer;\r\n                target.dispatchEvent(evt);\r\n                return evt.defaultPrevented;\r\n            }\r\n            return false;\r\n        };\r\n        // gets an element's closest draggable ancestor\r\n        DragDropTouch.prototype._closestDraggable = function (e) {\r\n            for (; e; e = e.parentElement) {\r\n                if (e.hasAttribute('draggable') && e.draggable) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return DragDropTouch;\r\n    }());\r\n    /*private*/ DragDropTouch._instance = new DragDropTouch(); // singleton\r\n    // constants\r\n    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\r\n    DragDropTouch._OPACITY = 0.5; // drag image opacity\r\n    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\r\n    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\r\n    DragDropTouch._ISPRESSHOLDMODE = false; // decides of press & hold mode presence\r\n    DragDropTouch._PRESSHOLDAWAIT = 400; // ms to wait before press & hold is detected\r\n    DragDropTouch._PRESSHOLDMARGIN = 25; // pixels that finger might shiver while pressing\r\n    DragDropTouch._PRESSHOLDTHRESHOLD = 0; // pixels to move before drag starts\r\n    // copy styles/attributes from drag source to drag image element\r\n    DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');\r\n    // synthesize and dispatch an event\r\n    // returns true if the event has been handled (e.preventDefault == true)\r\n    DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\r\n    DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');\r\n    DragDropTouch_1.DragDropTouch = DragDropTouch;\r\n})(DragDropTouch || (DragDropTouch = {}));\r\n","export namespace Util {\r\n  export const random = (min: number, max: number) => ~~(Math.random() * (max - min)) + min;\r\n\r\n  export const cloneDigit = (element: any, validDigit: string, updateScore: any) => {\r\n    const digitElement = element.cloneNode(true);\r\n    const check = digitElement.innerText === validDigit;\r\n    digitElement.style.background = check ? 'green' : 'red';\r\n    digitElement.ondragend = (event: any) => {\r\n      const panel = document.createElement('div');\r\n      panel.className = 'digit-panel';\r\n      event.target.replaceWith(panel);\r\n    };\r\n    updateScore(~~check - 1);\r\n    return digitElement;\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\ninterface ICompDigitProps extends React.SVGProps<SVGSVGElement> {\r\n  digit: number;\r\n  draggable: boolean;\r\n  onDragStart?: any;\r\n  onDragEnd?: any;\r\n}\r\n\r\nexport const CompDigit: React.FC<ICompDigitProps> = ({ digit, draggable, onDragStart, onDragEnd, ...props }) => {\r\n  return (\r\n    <div\r\n      draggable={draggable}\r\n      onDragStart={onDragStart}\r\n      onDragEnd={onDragEnd}\r\n      className=\"digit\"\r\n      style={{\r\n        fontFamily: 'FineCollege',\r\n      }}\r\n    >\r\n      {digit}\r\n    </div>\r\n  );\r\n};\r\n","import { connect } from 'redux-zero/react';\r\n\r\nexport const connectDigit = connect(\r\n  ({ digitPanel }: any) => ({ digitPanel }),\r\n  (store: any, props: any) => ({\r\n    targetPanel: (state: any, digitPanel: any) => {\r\n      store.setState({ digitPanel });\r\n    },\r\n  })\r\n);\r\n\r\nexport const connectEvaluation = connect(\r\n  ({ results, score }: any) => ({ results, score }),\r\n  (store: any, props: any) => ({\r\n    updateResult: ({ results }: any, index: number, value: boolean) => {\r\n      results[index] = value;\r\n      store.setState({ results });\r\n    },\r\n    updateScore: ({ score }: any, increment: number) => {\r\n      store.setState({ score: score + increment });\r\n    },\r\n  })\r\n);\r\n","import React from 'react';\r\nimport { connectEvaluation } from '../common/redux';\r\n\r\ninterface ICompEvaluationProps extends React.SVGProps<SVGSVGElement> {\r\n  results: any;\r\n  score: any;\r\n  updateScore: any;\r\n}\r\n\r\nconst FC: React.FC<ICompEvaluationProps> = ({ results, score, updateScore, ...props }) => {\r\n  const [finished, submit] = React.useState(false);\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'fixed',\r\n        top: 124,\r\n        right: 0,\r\n        width: 180,\r\n        paddingRight: 40,\r\n        textAlign: 'center',\r\n        zIndex: 999,\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          fontFamily: 'SaucerBB',\r\n          fontSize: 80,\r\n          color: finished ? 'red' : 'grey',\r\n        }}\r\n      >\r\n        {100 + score}\r\n      </div>\r\n      <div\r\n        style={{\r\n          fontWeight: 'bold',\r\n          backgroundColor: 'yellow',\r\n          padding: 4,\r\n          border: '2px solid blue',\r\n          cursor: 'pointer',\r\n        }}\r\n        onClick={() => {\r\n          if (finished) return;\r\n          const mark = results.reduce((mark: number, result: boolean) => {\r\n            return mark + (100 / results.length) * ~~result;\r\n          }, 0);\r\n          updateScore(mark - 100);\r\n          submit(true);\r\n        }}\r\n      >\r\n        SUBMIT\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CompEvaluation = connectEvaluation(FC);\r\n","import React from 'react';\r\n\r\ninterface ICompDigitPanelProps extends React.SVGProps<SVGSVGElement> {\r\n  onDragOver: any;\r\n  onDrop: any;\r\n}\r\n\r\nexport const CompDigitPanel: React.FC<ICompDigitPanelProps> = ({ onDragOver, onDrop, ...props }) => {\r\n  return (\r\n    <div onDragOver={onDragOver} onDrop={onDrop}>\r\n      <div className=\"digit-panel\" />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { connectDigit } from '../common/redux';\r\nimport { CompDigit } from './CompDigit';\r\nimport { CompDigitPanel } from './CompDigitPanel';\r\n\r\ninterface ICompOperandProps extends React.SVGProps<SVGSVGElement> {\r\n  value: string;\r\n  mask?: string;\r\n  targetPanel: any;\r\n}\r\n\r\nconst FC: React.FC<ICompOperandProps> = ({ value, mask = value, targetPanel, ...props }) => {\r\n  const number = React.useRef<HTMLDivElement>(null);\r\n  value = ('x'.repeat(mask.length) + value).slice(-mask.length);\r\n  // console.log({ value, mask });\r\n\r\n  return (\r\n    <div ref={number} style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n      {[...mask].map((digit, i) =>\r\n        isFinite(+digit) ? (\r\n          <CompDigit key={i} digit={+digit} draggable={false} />\r\n        ) : (\r\n          <CompDigitPanel\r\n            key={i}\r\n            onDragOver={(event: any) => event.preventDefault()}\r\n            onDrop={(event: any) =>\r\n              targetPanel({\r\n                validDigit: value[i],\r\n                panel: event.currentTarget,\r\n              })\r\n            }\r\n          />\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CompNumber = connectDigit(FC);\r\n","import React from 'react';\r\nimport { connectEvaluation } from '../common/redux';\r\nimport { CompNumber } from './CompNumber';\r\n\r\ninterface ICompAdditionProps extends React.SVGProps<SVGSVGElement> {\r\n  operands: number[];\r\n  updateResult: any;\r\n}\r\n\r\nconst FC: React.FC<ICompAdditionProps> = ({ id, operands, updateResult, ...props }) => {\r\n  const summandFirst = React.useRef<HTMLDivElement>(null);\r\n  const summandSecond = React.useRef<HTMLDivElement>(null);\r\n  const sum = React.useRef<HTMLDivElement>(null);\r\n  const [operandFirst, operandSecond] = operands;\r\n\r\n  React.useEffect(() => {\r\n    async function update() {\r\n      if (sum.current) {\r\n        updateResult(id, +sum.current?.innerText.replace(/\\s/g, '') === operandFirst + operandSecond);\r\n      }\r\n    }\r\n    update();\r\n  });\r\n\r\n  return (\r\n    <div className=\"calculation\">\r\n      <div ref={summandFirst}>\r\n        <CompNumber value={String(operandFirst)} />\r\n      </div>\r\n      <div className=\"operator\">\r\n        +{/* - */}\r\n        {/* &#x00d7; */}\r\n      </div>\r\n      <div ref={summandSecond}>\r\n        <CompNumber value={String(operandSecond)} />\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: 10,\r\n          background: '#0051f5',\r\n          color: 'transparent',\r\n          margin: '16px 0px',\r\n        }}\r\n      >\r\n        ==\r\n      </div>\r\n      <div ref={sum}>\r\n        <CompNumber\r\n          value={String(operandFirst + operandSecond)}\r\n          mask={'x'.repeat(Math.ceil(Math.log10(Math.max(...operands))) + 1)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CompAddition = connectEvaluation(FC);\r\n","import React, { SVGProps, useState, useEffect } from 'react';\r\nimport { connect } from 'redux-zero/react';\r\nimport Draggable from 'react-draggable';\r\nimport { IPageProps } from './';\r\nimport { CompDigit } from '../components/CompDigit';\r\nimport { CompEvaluation } from '../components/CompEvaluation';\r\nimport { CompAddition } from '../components/CompAddition';\r\nimport { connectDigit, connectEvaluation } from '../common/redux';\r\nimport { Util } from '../common/utils';\r\nimport logo from './draggable_4.svg';\r\nconst N = 20;\r\nconst MIN = 10;\r\nconst MAX = 100;\r\n\r\ninterface IPageDemoProps extends IPageProps {\r\n  digitPanel: any;\r\n  targetPanel: any;\r\n  updateScore: any;\r\n}\r\n\r\nconst FC: React.FC<IPageDemoProps> = (props) => {\r\n  const [_, refresh] = React.useState(0);\r\n  const { digitPanel, targetPanel, updateScore } = props;\r\n  const problems = React.useMemo(() => [...Array(N)].map(() => [Util.random(MIN, MAX), Util.random(MIN, MAX)]), []);\r\n\r\n  return (\r\n    <>\r\n      {/* <object data={logo} /> */}\r\n      <div style={{ display: 'flex', position: 'fixed', backgroundColor: 'white', zIndex: 999 }}>\r\n        {[...Array(10)].map((_, i) => (\r\n          <CompDigit\r\n            key={i}\r\n            digit={i}\r\n            draggable={true}\r\n            onDragStart={(event: any) => targetPanel(null)}\r\n            onDragEnd={(event: any) => {\r\n              if (digitPanel) {\r\n                const { validDigit, panel } = digitPanel;\r\n                panel.innerHTML = '';\r\n                panel.appendChild(Util.cloneDigit(event.target, validDigit, updateScore));\r\n                refresh(Math.random());\r\n              }\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <CompEvaluation />\r\n      <div style={{ position: 'absolute', top: 124, overflowY: 'scroll', width: '100%', height: 900 }}>\r\n        <div style={{ display: 'flex', flexFlow: 'wrap', backgroundColor: 'linen' }}>\r\n          {problems.map((operands, i) => (\r\n            <CompAddition key={i} id={String(i)} operands={operands} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const PageDemo = connectEvaluation(connectDigit(FC));\r\n","import React from 'react';\r\nimport createStore from 'redux-zero';\r\nimport { Provider, connect } from 'redux-zero/react';\r\nimport { PageDemo } from './PageDemo';\r\nimport './index.scss';\r\nimport './fonts.css';\r\n\r\nexport interface IPageProps extends React.SVGProps<SVGSVGElement> {\r\n  push: any;\r\n  pop: any;\r\n}\r\n\r\nexport namespace Page {\r\n  export enum ETypes {\r\n    DEMO,\r\n  }\r\n\r\n  const pages = (props: any) => ({\r\n    [ETypes.DEMO]: <PageDemo key=\"PageDemo\" {...props} />,\r\n  });\r\n  const stack: ETypes[] = [];\r\n  const store = createStore({ currentPage: ETypes.DEMO, results: [], score: 0 });\r\n\r\n  const mapToProps = ({ currentPage }: any) => ({ currentPage });\r\n  const actions = (store: any, props: any) => ({\r\n    push: ({ currentPage }: any, next: ETypes) => {\r\n      stack.push(currentPage);\r\n      store.setState({ currentPage: next });\r\n    },\r\n    pop: (state: any) => {\r\n      const previous = stack.pop();\r\n      store.setState({ currentPage: previous });\r\n    },\r\n  });\r\n  const Content = connect(mapToProps, actions)((props: any) => pages(props)[props.currentPage as ETypes]);\r\n\r\n  export const Display: any = () => (\r\n    <Provider store={store}>\r\n      <Content />\r\n    </Provider>\r\n  );\r\n}\r\n","import { Page } from './pages';\nimport './App.css';\n\nfunction App() {\n  return <Page.Display />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry?: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './DragDropTouch';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}